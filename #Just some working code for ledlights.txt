#Just some working code for ledlights

class InEvent:
	def __init__(self, name, *settings) -> None:
		self.name = name
		num_leds = 
		#self.inbus_event = inbus_event
		debug("task create: {}".format(name))

	async def set_state(self, name):
		while True:
			await self.inbus_event.wait()
			if name in inbus and inbus.get(name, "OFF") == "ON":
				self.leds.setall(self.rgb_tuple)
				inbus_event.clear()

	async def set_bri(self, name):
		while True:
			await self.inbus_event.wait()
			if name in inbus:
				info(inbus.get(name, "logger: unknown inbus event") )
				inbus_event.clear()

	async def set_rgb(self, name):
		while True:
			await self.inbus_event.wait()
			if name in inbus:
				info(inbus.get(name, "logger: unknown inbus event") )
				inbus_event.clear()

class OutEvent:
	def __init__(self, name, *settings) -> None:
		self.name = name
		pin_num = settings.get('pin', None)
		if not pin_num:
			raise ValueError
		self.pin = Pin(pin_num, Pin.IN)
		self.invert = settings.get('invert', 1) > 0		# default False
		#self.inbus_event = inbus_event
		debug("task create: {}".format(name))
		tasklist[name] = asyncio.create_task(self.handler())
		self.last = self.read_pin()

	async def handler(self):
		while True:
			new = (not self.pin.value()) if self.invert else (self.pin.value() > 0)
			if new != self.last:
				outbus[self.name] = "ON" if new else "OFF"
				outbus_event.set()
			

class Class:
	
	def __init__(self, instance="ledlight.ledlight"):
		config = load_file()[instance]		
		self.instance = instance
		self.version = version
		for i in config.keys():
			defaults[i] = config[i]
		name = instance.split('.')[1]
		if defaults['leds'] > 0:
			self.leds = NeoPixel(Pin(defaults['pin']), defaults["leds"])
			self.setall()
		else:
			self.leds = None
		self.light_rgb = (0,0,0)
		self.light_name = defaults['light_name']
		self.night_rgb = tuple([int(i) for i in defaults['night_rgb'].split(",")])
		self.night_name = defaults['night_name']
		self.motion_name = defaults['motion_name']
		self.last_motion = time()
		self.night_on = False
		self.night_delay = defaults['night_delay']

	def setall(self, color=(0,0,0)):
		if self.leds is None:
			return
		self.leds.fill(color)
		self.leds.write()

	def update(self):
		changed = False
		# change nightlight color only
		if self.night_name in eventbus and self.night_rgb != eventbus[self.night_name]:
			self.night_rgb = eventbus[self.night_name]
			changed = True
		# motion turn on nightlight or change color
		if self.motion_name in eventbus:
			self.last_motion = time()
			if self.light_rgb == (0,0,0):
				if not self.night_on or (changed and self.night_on):
					self.night_on = True
					self.setall(self.night_rgb)
		# Turn off nightlight after delay
		if self.night_on and time() - self.last_motion > self.night_delay:
			self.night_on = False
			self.setall()
		# set light, turn off nightlight
		if self.light_name in eventbus and self.light_rgb != eventbus[self.light_name]:
			self.light_rgb = eventbus[self.light_name]
			self.setall(self.light_rgb)
			self.night_on = False
